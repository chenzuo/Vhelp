@using VideoHelp.UI.Web
@model VideoHelp.ReadModel.Views.MeetingView

@{
    ViewBag.Title = "Комната " + Model.Name;
}

<link href="@Url.Content("~/Content/css/video.css")" rel="stylesheet" type="text/css" />

  

<div class="mainContainer">
    
    <div class="topContainer">
        <div class="align_center_to_left">
            <div class="align_center_to_right">
                <div>
                    <div class="videoMenu">
                        <p><a href="#" id="addBox" data-bind="click: createOwnerVideoStream" class="btn btn-success"><i class="icon-facetime-video icon-white"></i> Включить</a></p>     
                        <p><a href="#" id="process" class="btn btn-success"><i class="icon-facetime-video icon-white"></i> process</a></p>    
                    </div>    
                    <div class = "videoContainer" data-bind="foreach: videoContainers">
                        <div data-bind = "addToVideoContainer: $data"></div>
                    </div>
                </div>
            </div> 
        </div>
    </div>
</div>

<script src="/Scripts/jquery.tmpl.js" type="text/javascript"></script>
<script src="/Scripts/knockout.js" type="text/javascript"></script>
<script src="/Scripts/jquery.signalR.min.js" type="text/javascript"></script>
<script src="/signalr/hubs" type="text/javascript"></script>
<script src="/Scripts/swfobject.js" type="text/javascript"></script>
<script src="/Scripts/jquery.swfobject.1-1-1.min.js" type="text/javascript"></script>


<script type="text/javascript">

    $viewModel = {
        currentStream: ko.observable(),
        videoStreams: ko.observableArray([]),
        videoContainers: ko.observableArray([]),

        addVideoContainer: function (id, container) {
            this.videoContainers.push({ id: id, container: container });
        },

        addVideoStream: function (userId, farId) {
            var stream = { userId: userId, farId: farId };

            if (this.currentStream() == null) {
                this.currentStream(stream);
                $("#ownerVideoPreview").removeClass('fullScreenOwnerVideoPreview').addClass('ownerVideoPreview');
                return;
            }

            this.videoStreams.push(stream);
        },

        createOwnerVideoStream: function () {

            var flash = $.flash.create(
            {
                swf: '@Url.Content("~/Content/flash/VideoIO.swf")',
                quality: 'high',
                width: '100%',
                height: '100%',
                scale: "exactFit",
                name: 'video-publisher',
                allowfullscreen: 'true',
                allowscriptaccess: 'always',
                flashvars: {
                    controls: 'true',
                    url: 'rtmfp://stratus.rtmfp.net/d1e1e5b3f17e90eb35d244fd-c711881365d9',
                    publish: '@UserManager.CurrentUser',
                    cameraWidth: 640,
                    cameraHeight: 480,
                    cameraQuality: 90,
                    smoothing: true
                }
            });

            this.addVideoContainer('@UserManager.CurrentUser', flash);

        }
    };


    ko.bindingHandlers.addToVideoContainer = {
        update: function (element, valueAccessor) {
            var container = ko.utils.unwrapObservable(valueAccessor());

            var cssClass = $(".mainView").length > 0 ? "preview" : "mainView";

            $(element).addClass(cssClass).append(container.container);
        }
    };

    ko.applyBindings($viewModel);

    $(".preview").live("mousedown", function () {
        $(".mainView").removeClass('mainView').addClass('preview');
        $(this).removeClass('preview').addClass('mainView');
    });
    

    $('#process').bind('click', function () {

        $viewModel.addVideoContainer('fsdfds', createVideoContainer('432', '423432')); 

       //$viewModel.addVideoStream('ewew', '453sefrew');
    });

    var meetingHub = $.connection.meetingHub;

    meetingHub.updateCameraStream = function (userId, farId) {

        if ('@UserManager.CurrentUser' != userId) {
            $viewModel.addVideoContainer(userId, createVideoContainer(userId, farId)); 
        }
    };


    function createVideoContainer(userId, farId) {
        return $.flash.create({
            swf: '@Url.Content("~/Content/flash/VideoIO.swf")',
            quality: 'high',
            width: '100%',
            height: '100%',
            scale: "exactFit",
            allowfullscreen: 'false',
            allowscriptaccess: 'always',
            flashvars: {
                controls: 'false',
                url: 'rtmfp://stratus.rtmfp.net/d1e1e5b3f17e90eb35d244fd-c711881365d9',
                play: userId,
                farID: farId
            }
        });
    }

    //стартуем все хабы
    $.connection.hub.start(function () {
        meetingHub.joinToMeeting('@Model.Id', '@UserManager.CurrentUser');
    });

    function onPropertyChange(event) {
        console.log(event.property + " " + event.newValue);
        if (event.property == "nearID" && event.objectID == "video-publisher") {
            meetingHub.attachCameraStream('@Model.Id', '@UserManager.CurrentUser', event.newValue);
        }
    }
 
</script>​